package faktura;

import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.*;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.table.DefaultTableModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author radicalb
 */
public class GlavnoOkno extends javax.swing.JFrame implements Printable {

    /**
     * Creates new form GlavnoOkno
     */
    public GlavnoOkno() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        dateChooserCombo1 = new datechooser.beans.DateChooserCombo();
        dateChooserCombo2 = new datechooser.beans.DateChooserCombo();
        dateChooserCombo3 = new datechooser.beans.DateChooserCombo();
        jTextField3 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jComboBox5 = new javax.swing.JComboBox();
        jTextField2 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jComboBox6 = new javax.swing.JComboBox();
        jTextField5 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jComboBox7 = new javax.swing.JComboBox();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jComboBox8 = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jTextField11 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jComboBox9 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel34 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jTextField14 = new javax.swing.JTextField();
        jTextField15 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenu5 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem8 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("UrbanSoftware Faktura");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel1.setText("Številka računa:");

        jTextField1.setBackground(new java.awt.Color(190, 216, 245));
        jTextField1.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel2.setText("Stranka:");

        jLabel3.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel3.setText("Datum izdaje:");

        jLabel4.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel4.setText("Datum storitve:");

        jLabel5.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel5.setText("Datum zapadlosti:");

        jLabel6.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel6.setText("Kraj:");

        jTextField6.setBackground(new java.awt.Color(190, 216, 245));
        jTextField6.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel7.setText("Sestavil:");

        jLabel8.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel8.setText("Vnos");

        jLabel9.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel9.setText("Način plačila:");

        jComboBox2.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gotovina" }));

        dateChooserCombo1.setCalendarPreferredSize(new java.awt.Dimension(360, 200));
        dateChooserCombo1.setFieldFont(new java.awt.Font("Ubuntu", java.awt.Font.PLAIN, 14));
        dateChooserCombo1.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);
        dateChooserCombo1.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
            public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
                dateChooserCombo1OnSelectionChange(evt);
            }
        });

        dateChooserCombo2.setCalendarPreferredSize(new java.awt.Dimension(360, 200));
        dateChooserCombo2.setFieldFont(new java.awt.Font("Ubuntu", java.awt.Font.PLAIN, 14));
        dateChooserCombo2.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);

        dateChooserCombo3.setCalendarPreferredSize(new java.awt.Dimension(360, 200));
        dateChooserCombo3.setFieldFont(new java.awt.Font("Ubuntu", java.awt.Font.PLAIN, 14));
        dateChooserCombo3.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);

        jTextField3.setBackground(new java.awt.Color(190, 216, 245));
        jTextField3.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(104, 94, 94));
        jLabel10.setText("Zadnji izdan račun: ni izdanih računov");

        jTextField4.setBackground(new java.awt.Color(190, 216, 245));
        jTextField4.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel11.setText("Naslov:");

        jCheckBox1.setText("Končni kupec");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jComboBox5.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "nalagam ..." }));
        jComboBox5.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox5ItemStateChanged(evt);
            }
        });

        jTextField2.setBackground(new java.awt.Color(190, 216, 245));
        jTextField2.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel14.setText("Davčna številka:");

        jButton5.setFont(new java.awt.Font("Ubuntu", 0, 8)); // NOI18N
        jButton5.setText("+");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jComboBox6.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "nalagam ..." }));
        jComboBox6.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox6ItemStateChanged(evt);
            }
        });

        jTextField5.setBackground(new java.awt.Color(190, 216, 245));
        jTextField5.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        jTextField7.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jTextField7.setText("1");
        jTextField7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField7KeyReleased(evt);
            }
        });

        jComboBox7.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "nalagam ..." }));

        jTextField8.setBackground(new java.awt.Color(190, 216, 245));
        jTextField8.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        jTextField9.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jTextField9.setText("0");
        jTextField9.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField9KeyReleased(evt);
            }
        });

        jComboBox8.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jComboBox8.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "nalagam ..." }));

        jLabel15.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel15.setText("Šifra");

        jLabel16.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel16.setText("Naziv");

        jLabel17.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel17.setText("Količina");

        jLabel18.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel18.setText("EM");

        jLabel19.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel19.setText("Cena brez DDV");

        jLabel20.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel20.setText("DDV");

        jLabel21.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel21.setText("Popust%");

        jTextField10.setBackground(new java.awt.Color(190, 216, 245));
        jTextField10.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        jLabel22.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel22.setText("Vred. z/brez DDV");

        jTable2.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Šifra", "Naziv", "Količina", "EM", "Cena brez DDV", "DDV(%)", "Popust(%)", "Vrednost brez DDV", "Vrednost z DDV"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jTextField11.setBackground(new java.awt.Color(190, 216, 245));
        jTextField11.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        jLabel24.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel24.setText("Skupaj brez popusta:");

        jLabel25.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel25.setText("Znesek popusta:");

        jLabel26.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel26.setText("Znesek brez DDV:");

        jLabel27.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel27.setText("Znesek DDV:");

        jLabel28.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel28.setText("Skupaj:");

        jLabel29.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel29.setText("0");

        jLabel30.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel30.setText("0");

        jLabel31.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel31.setText("0");

        jLabel32.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel32.setText("0");

        jLabel33.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel33.setText("0");

        jButton6.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        jButton6.setText("-");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jButton8.setText("Račun");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jComboBox9.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jComboBox9.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "računa", "dobavnice", "predračuna" }));
        jComboBox9.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox9ItemStateChanged(evt);
            }
        });

        jTextArea1.setBackground(new java.awt.Color(190, 216, 245));
        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("DDV NI ZARAČUNAN NA PODLAGI 2.TOČKE 94.ČLENA ZDDV-1");
        jScrollPane1.setViewportView(jTextArea1);

        jLabel34.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel34.setText("Opomba v nogi dokumenta:");

        jTextField12.setBackground(new java.awt.Color(190, 216, 245));
        jTextField12.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        jLabel35.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        jLabel35.setText("vezan na dobavnico št.:");

        jTextField13.setBackground(new java.awt.Color(190, 216, 245));
        jTextField13.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        jTextField14.setBackground(new java.awt.Color(190, 216, 245));
        jTextField14.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        jTextField15.setBackground(new java.awt.Color(190, 216, 245));
        jTextField15.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jMenuBar1.setMinimumSize(new java.awt.Dimension(1, 2));

        jMenu1.setText("Program");

        jMenuItem6.setText("O programu");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem2.setText("Spremeni administratorjevo geslo");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);
        jMenu1.add(jSeparator4);

        jMenuItem7.setText("Izhod");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Dokumenti");

        jMenuItem1.setText("Pregled in tiskanje izdanih dokumentov");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);
        jMenu3.add(jSeparator1);

        jMenuItem3.setText("Dnevni izpis računov");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem4.setText("Mesečni izpis računov");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);
        jMenu3.add(jSeparator2);

        jMenu5.setText("Neporavnane dobavnice");
        jMenu3.add(jMenu5);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Stranke");

        jMenuItem9.setText("Dodaj stranko");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem9);

        jMenuItem5.setText("Preglej in uredi stranke");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem5);

        jMenuBar1.add(jMenu4);

        jMenu2.setText("Izdelki");

        jMenuItem10.setText("Dodaj izdelek");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem10);

        jMenuItem11.setText("Preglej in uredi izdelke");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);
        jMenu2.add(jSeparator3);

        jMenuItem8.setText("Preglej/izpiši zalogo");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel15)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addGap(320, 320, 320)
                                .addComponent(jLabel22)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField6, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateChooserCombo2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(dateChooserCombo3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(134, 134, 134)
                                        .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(83, 83, 83)
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel19)
                                .addGap(37, 37, 37)
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel21))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(635, 635, 635)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel28, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel32, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel31, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel30, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                                    .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jComboBox5, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBox1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBox9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 499, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel35)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(71, 71, 71))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel14))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jComboBox9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jCheckBox1)
                        .addGap(7, 7, 7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel10))
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4))
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateChooserCombo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateChooserCombo3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel34))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20)
                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(jLabel29))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel25)
                            .addComponent(jLabel30))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel26)
                            .addComponent(jLabel31))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel27)
                            .addComponent(jLabel32))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel28)
                            .addComponent(jLabel33))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    private DefaultTableModel model;
    public static boolean aliNalozimVse=false;
    private float[] zaloga;
    
    private boolean avtentikacijaAdministratorja(){
        JPasswordField pwd = new JPasswordField(10);  
        int action = JOptionPane.showConfirmDialog(null, pwd,"Administratorsko geslo",JOptionPane.OK_CANCEL_OPTION); 
        String adminPass=new String(pwd.getPassword());
        
        if(!(Faktura.notEmpty(adminPass))){
            return false;
        }    
            try{
                
                java.sql.Driver d = null;
                java.sql.Connection c = null;
                java.sql.Statement s = null;
                java.sql.ResultSet rs = null;
            
                try {
                    c = java.sql.DriverManager.getConnection (Faktura.databaseURL, Faktura.user, Faktura.password);
                    System.out.println ("Connection established.");
                }
                catch (java.sql.SQLException e) {
                    System.out.println ("Unable to establish a connection through the driver manager.");
                }
            
                s = c.createStatement ();
                rs = s.executeQuery("SELECT vrednoststring FROM nastavitve WHERE naziv='adminPass'");
            
                
                rs.next();
                //System.out.println (rs.getString("vrednoststring"));
                if(adminPass.equals(rs.getString("vrednoststring"))){
                    Faktura.adminMode=true;
                }else{
                    JOptionPane.showMessageDialog(rootPane,"Vnesli ste napačno administratorsko geslo! Prijava je bila neuspešna.");
                }
                
           
                c.close();
            
            } catch (SQLException ex) {
                Logger.getLogger(GlavnoOkno.class.getName()).log(Level.SEVERE, null, ex);
            }
            return Faktura.adminMode;
    }
    
    private void naloziRacunPoDobavnici(String dobavnicaid){
        novRacun();
        setEditableToTrue();
        jComboBox9.setSelectedIndex(0);
        jTextField12.setText(dobavnicaid);
        
        try{
                
                java.sql.Driver d = null;
                java.sql.Connection c = null;
                java.sql.Statement s,s2 = null;
                java.sql.ResultSet rs,rs2 = null;
            
                try {
                    c = java.sql.DriverManager.getConnection (Faktura.databaseURL, Faktura.user, Faktura.password);
                    System.out.println ("Connection established.");
                }
                catch (java.sql.SQLException e) {
                    System.out.println ("Unable to establish a connection through the driver manager.");
                }
            
            
                s = c.createStatement ();
                String SQLQuery="select stranka.strankaid,stranka.naziv,stranka.naslov ,posta.postnast,posta.kraj,stranka.imedrzave_fk,stranka.davcnastevilka,dan,mesecid_fk,leto,zapadlost from dobavnica INNER JOIN stranka ON stranka.strankaid=dobavnica.strankaid_fk INNER JOIN posta ON stranka.postnast_fk=posta.postnast where dobavnicaid='"+dobavnicaid+"'";
                System.out.println(SQLQuery);
                rs = s.executeQuery (SQLQuery);
  
                rs.next();
               
                if(rs.getInt("strankaid")!=0){
                    jCheckBox1.setSelected(false);
                    doOnKoncniKupecSelectedChange();
                    jComboBox5.setSelectedItem(rs.getString("naziv"));
                    jTextField4.setText(rs.getString("naslov"));
                    jTextField13.setText(rs.getString("postnast"));
                    jTextField14.setText(rs.getString("kraj"));
                    jTextField6.setText(rs.getString("imedrzave_fk"));
                    jTextField2.setText(rs.getString("davcnastevilka"));
                }else{
                    jCheckBox1.setSelected(true);
                    doOnKoncniKupecSelectedChange();
                }
                dateChooserCombo2.setEnabled(true);
                dateChooserCombo2.setText(""+rs.getInt("dan")+"."+rs.getInt("mesecid_fk")+"."+rs.getInt("leto"));
                dateChooserCombo2.setEnabled(false);
                nastaviRokPlacila(rs.getInt("zapadlost"));
        
                //zdaj je tukaj treba še narest da dodamo vse izdelek iz dobavnica_izdelek
                s2 = c.createStatement ();
                SQLQuery="select izdelek.naziv,dobavnica_izdelek.kolicina,dobavnica_izdelek.popust FROM dobavnica_izdelek "
                        + "INNER JOIN izdelek ON dobavnica_izdelek.izdelekid_fk=izdelek.izdelekid "
                        + "where dobavnicaid_fk='"+dobavnicaid+"'";
                System.out.println(SQLQuery);
                rs2 = s2.executeQuery (SQLQuery);
  
                while(rs2.next()){
                    //model.insertRow(jTable2.getRowCount(),new String[]{rs2.getString("izdelekid"),rs2.getString("naziv"),rs2.getString("kolicina"),rs2.getString("mera"),"",rs2.getString("stopnja"),rs2.getString("popust")});
                    jComboBox6.setSelectedItem(rs2.getString("naziv"));
                    jTextField7.setText(rs2.getString("kolicina"));
                    jTextField9.setText(rs2.getString("popust"));
                    model.insertRow(jTable2.getRowCount(),new String[]{jTextField5.getText(),jComboBox6.getSelectedItem().toString(),jTextField7.getText(),jComboBox7.getSelectedItem().toString(),jTextField8.getText(),jComboBox8.getSelectedItem().toString(),jTextField9.getText(),jTextField11.getText(),jTextField10.getText()});      
                }
                izracunajCelotniSkupniZnesek();
                jTextField7.setText("1");
                jTextField9.setText("0");
                
                c.close();
            
            } catch (SQLException ex) {
                Logger.getLogger(GlavnoOkno.class.getName()).log(Level.SEVERE, null, ex);
            }
            setEditableToFalse();
    }
    
    private void natisniRacun(){
        if(model.getRowCount()>0){
        //--- Create a printerJob object
            PrinterJob printJob = PrinterJob.getPrinterJob ();
            
            printJob.setJobName(jTextField1.getText());
            int pageW=200;
            int pageH=800;        
            String printerTip="printer80mm";
            if(printerTip=="printer80mm"){
                //paper80mm
                pageW=(int)(80*2.83);
                pageH=290+(model.getRowCount()*40)+266;
            }else if(printerTip=="A4"){
                pageW=595;
                pageH=842;
            }
            
            Paper paper = new Paper();
            paper.setSize(pageW, pageH);
            paper.setImageableArea(0,0,pageW, pageH);
            PageFormat pf=new PageFormat();
            pf.setPaper(paper);
            pf.setOrientation(PageFormat.PORTRAIT);
            Book pBook = new Book();
            pBook.append(this, pf,1);
            printJob.setPageable(pBook); 
            //--- Show a print dialog to the Faktura.user. If the Faktura.user
            //--- clicks the print button, then print, otherwise
            //--- cancel the print job
            if (printJob.printDialog()) {
                try {
                    printJob.print();
                } catch (Exception PrintException) {
                    PrintException.printStackTrace();
                }
            }
        }else{
            //JOptionPane.showMessageDialog(rootPane, "Prazen račun ni mogoče izdati! Prosimo dodajte vsaj en izdelek.");
        }
    }
    
    private void novRacun(){
        setEditableToTrue();
        while(model.getRowCount()>0){
            model.removeRow(0);
        }
        jTextField7.setText("1");
        jTextField9.setText("0");
        jTextField12.setText(null);
         try{

       
            java.sql.Driver d = null;
            java.sql.Connection c = null;
            java.sql.Statement s = null;
            java.sql.ResultSet rs = null;
            
            try {
              c = java.sql.DriverManager.getConnection (Faktura.databaseURL, Faktura.user, Faktura.password);
              System.out.println ("Connection established.");
            }
            catch (java.sql.SQLException e) {
              System.out.println ("Unable to establish a connection through the driver manager.");
            }
            
            jComboBox9.setSelectedIndex(0);
                       
            Calendar current = dateChooserCombo1.getCurrent();
            int leto=current.get(1);
            
            s = c.createStatement ();
            rs = s.executeQuery ("select * from nakup where leto='"+leto+"' order by nakupid desc");
            
            if(!(rs.isBeforeFirst())){
                System.out.println ("ni izdanih računov-------------------------------------------------");
                jTextField1.setText(leto+"-00001");
                
            }else{
                rs.next();
                String zadnjiIzdanRacun = rs.getString("nakupid");
                jLabel10.setText("Zadnji izdan račun: ".concat(zadnjiIzdanRacun));
                String stPrejsnjega=zadnjiIzdanRacun.substring(zadnjiIzdanRacun.indexOf("-")+1, zadnjiIzdanRacun.length());
                int stPrejsnjegaI=Integer.parseInt(stPrejsnjega);
                stPrejsnjegaI++;
                String novaSt="0000"+stPrejsnjegaI;
                novaSt=novaSt.substring(novaSt.length()-5, novaSt.length());
                jTextField1.setText(leto+"-"+novaSt);
            }
            c.close();
        
        } catch (SQLException ex) {
            Logger.getLogger(GlavnoOkno.class.getName()).log(Level.SEVERE, null, ex);
        }
        setEditableToFalse();
    }
    
    private void doOnKoncniKupecSelectedChange(){
     if(jCheckBox1.isSelected()){
            jTextField4.setEnabled(false);
            jTextField2.setEnabled(false);
            jTextField13.setEnabled(false);
            jTextField14.setEnabled(false);
            jTextField15.setEnabled(false);
            jComboBox5.setEnabled(false);
            nastaviRokPlacila(0);
            dateChooserCombo2.setEnabled(false);
            dateChooserCombo3.setEnabled(false);
            jComboBox2.setSelectedItem("Gotovina");
            jComboBox2.setEnabled(false);
        }else{
            jTextField4.setEnabled(true);
            jTextField2.setEnabled(true);
            jTextField13.setEnabled(true);
            jTextField14.setEnabled(true);
            jTextField15.setEnabled(true);
            jComboBox5.setEnabled(true);
            dateChooserCombo2.setEnabled(true);
            dateChooserCombo3.setEnabled(true);
            jComboBox2.setEnabled(true);
            posodobiPodatkeOStranki(jComboBox5.getSelectedItem().toString());
        }
    }
    
    private void setEditableToTrue(){
        jTextField1.setEditable(true);
        jTextField2.setEditable(true);
        jTextField3.setEditable(true);
        jTextField4.setEditable(true);
        jTextField5.setEditable(true);
        jTextField6.setEditable(true);
        jTextField8.setEditable(true);
        jTextField10.setEditable(true);
        jTextField11.setEditable(true);
        jTextField12.setEditable(true);
        jTextField13.setEditable(true);
        jTextField14.setEditable(true);
        jTextField15.setEditable(true);
        jComboBox7.setEnabled(true);
        jComboBox8.setEnabled(true);

    }
    
    private void setEditableToFalse(){
        jTextField1.setEditable(false);
        jTextField2.setEditable(false);
        jTextField3.setEditable(false);
        jTextField4.setEditable(false);
        jTextField5.setEditable(false);
        jTextField6.setEditable(false);
        jTextField8.setEditable(false);
        jTextField10.setEditable(false);
        jTextField11.setEditable(false);
        jTextField12.setEditable(false);
        jTextField13.setEditable(false);
        jTextField14.setEditable(false);
        jTextField15.setEditable(false);
        jComboBox7.setEnabled(false);
        jComboBox8.setEnabled(false);

    }
    
    private boolean shraniRacun(String tip){
         try{
   
            java.sql.Driver d = null;
            java.sql.Connection c = null;
            java.sql.Statement s,s1,s2,s10,s9 = null;
            java.sql.ResultSet rs10,rs9=null;

            
            try {
              c = java.sql.DriverManager.getConnection (Faktura.databaseURL, Faktura.user, Faktura.password);
              System.out.println ("Connection established.");
            }
            catch (java.sql.SQLException e) {
              System.out.println ("Unable to establish a connection through the driver manager.");
            }
            
            s = c.createStatement ();
            s1 = c.createStatement ();
            s2 = c.createStatement ();
            
            Calendar current = dateChooserCombo1.getCurrent();      
            int dan=current.get(5);
            int mesec=current.get(2)+1;
            int leto=current.get(1);
            
            Calendar storitev = dateChooserCombo2.getCurrent();      
            int danS=storitev.get(5);
            int mesecS=storitev.get(2)+1;
            int letoS=storitev.get(1);
            
            Calendar zapadlost = dateChooserCombo3.getCurrent();      
            int danZ=zapadlost.get(5);
            int mesecZ=zapadlost.get(2)+1;
            int letoZ=zapadlost.get(1);
            
            Boolean isBad=true;
            String sqlQuery;
            
            if(tip=="računa"){    
                if(jCheckBox1.isSelected()){
                    sqlQuery ="insert into nakup VALUES('"
                        +jTextField1.getText()+"',"
                        +0+","
                        +"(SELECT PRODAJALECID FROM PRODAJALEC where ime='"+jTextField3.getText()+"'),"
                        +dan+","+mesec+","+leto+","
                        +danS+","+mesecS+","+letoS+","
                        +danZ+","+mesecZ+","+letoZ+",'"
                        +jTextField6.getText()+"',"
                        +"(SELECT NACIN_PLACILAID FROM NACIN_PLACILA where naziv='"+jComboBox2.getSelectedItem().toString()
                        + "'),'"
                        +jTextArea1.getText()
                        + "');";
                }else{
                    sqlQuery ="insert into nakup VALUES('"
                        +jTextField1.getText()+"',"
                        +"(SELECT strankaID FROM STRANKA where naziv='"+jComboBox5.getSelectedItem().toString()+"' and STRANKAID IN (select max(stranka.strankaid) strankaid from stranka GROUP BY NAZIV )),"
                        +"(SELECT PRODAJALECID FROM PRODAJALEC where ime='"+jTextField3.getText()+"'),"
                        +dan+","+mesec+","+leto+","
                        +danS+","+mesecS+","+letoS+","
                        +danZ+","+mesecZ+","+letoZ+",'"
                        +jTextField6.getText()+"',"
                        +"(SELECT NACIN_PLACILAID FROM NACIN_PLACILA where naziv='"+jComboBox2.getSelectedItem().toString()
                         + "'),'"
                        +jTextArea1.getText()
                        + "');";
                
                }
                System.out.println("---*-: "+sqlQuery);
                isBad=s.execute(sqlQuery);
                
                
                for(int i=0;i<model.getRowCount();i++){
                    System.out.println("-----*-***nakup_izdelek insert");
                    sqlQuery = "insert into nakup_izdelek VALUES("
                        +null+ ",'"
                        +jTextField1.getText()+"',"
                        +model.getValueAt(i, 0)+","
                        +model.getValueAt(i, 2).toString().replace(',','.')+","    
                        +"(SELECT EMID FROM EM where mera='"+model.getValueAt(i, 3)+"'),"
                        +"(SELECT CENAID_FK FROM IZDELEK where IZDELEKID='"+model.getValueAt(i, 0)+"'),"
                        +"(SELECT DAVEKID FROM DAVEK where stopnja='"+model.getValueAt(i, 5) +"'),"    //.toString().replace(',','.')
                        +model.getValueAt(i, 6)
                        + ");";
                    System.out.println(sqlQuery);
                    isBad=s1.execute(sqlQuery);
                }
                if(!(jTextField12.getText().isEmpty())){
                    sqlQuery="UPDATE dobavnica SET nakupID_FK='"+jTextField1.getText()+"' WHERE dobavnicaid='"+jTextField12.getText()+"'";
                    isBad=s2.execute(sqlQuery);
                }
                        
            }else if(tip=="dobavnice"){
                   if(jCheckBox1.isSelected()){
                    sqlQuery ="insert into dobavnica VALUES('"
                        +jTextField1.getText()+"',"
                        +0+","
                        +"(SELECT PRODAJALECID FROM PRODAJALEC where ime='"+jTextField3.getText()+"'),"
                        +dan+","+mesec+","+leto+","
                        +danS+","+mesecS+","+letoS+","
                        +danZ+","+mesecZ+","+letoZ+",'"
                        +jTextField6.getText()+"',"
                        +"(SELECT NACIN_PLACILAID FROM NACIN_PLACILA where naziv='"+jComboBox2.getSelectedItem().toString()
                        + "'),'"
                        +jTextArea1.getText()
                        + "',"+null+");";
                }else{
                    sqlQuery ="insert into dobavnica VALUES('"
                        +jTextField1.getText()+"',"
                        +"(SELECT strankaID FROM STRANKA where naziv='"+jComboBox5.getSelectedItem().toString()+"' and STRANKAID IN (select max(stranka.strankaid) strankaid from stranka GROUP BY NAZIV )),"
                        +"(SELECT PRODAJALECID FROM PRODAJALEC where ime='"+jTextField3.getText()+"'),"
                        +dan+","+mesec+","+leto+","
                        +danS+","+mesecS+","+letoS+","
                        +danZ+","+mesecZ+","+letoZ+",'"
                        +jTextField6.getText()+"',"
                        +"(SELECT NACIN_PLACILAID FROM NACIN_PLACILA where naziv='"+jComboBox2.getSelectedItem().toString()
                         + "'),'"
                        +jTextArea1.getText()
                        + "',"+null+");";
                
                }
                System.out.println("---*-: "+sqlQuery);
                isBad=s.execute(sqlQuery);
                
                
                for(int i=0;i<model.getRowCount();i++){
                    System.out.println("-----*-***nakup_izdelek insert");
                    sqlQuery = "insert into dobavnica_izdelek VALUES("
                        +null+ ",'"
                        +jTextField1.getText()+"',"
                        +model.getValueAt(i, 0)+","
                        +model.getValueAt(i, 2).toString().replace(',','.')+","    
                        +"(SELECT EMID FROM EM where mera='"+model.getValueAt(i, 3)+"'),"
                        +"(SELECT CENAID_FK FROM IZDELEK where IZDELEKID='"+model.getValueAt(i, 0)+"'),"
                        +"(SELECT DAVEKID FROM DAVEK where stopnja='"+model.getValueAt(i, 5) +"'),"    //.toString().replace(',','.')
                        +model.getValueAt(i, 6)
                        + ");";
                    System.out.println(sqlQuery);
                    isBad=s1.execute(sqlQuery);
                }
            }else if(tip=="predračuna"){
                  if(jCheckBox1.isSelected()){
                    sqlQuery ="insert into predracun VALUES('"
                        +jTextField1.getText()+"',"
                        +0+","
                        +"(SELECT PRODAJALECID FROM PRODAJALEC where ime='"+jTextField3.getText()+"'),"
                        +dan+","+mesec+","+leto+","
                        +danS+","+mesecS+","+letoS+","
                        +danZ+","+mesecZ+","+letoZ+",'"
                        +jTextField6.getText()+"',"
                        +"(SELECT NACIN_PLACILAID FROM NACIN_PLACILA where naziv='"+jComboBox2.getSelectedItem().toString()
                        + "'),'"
                        +jTextArea1.getText()
                        + "',"+null+");";
                }else{
                    sqlQuery ="insert into predracun VALUES('"
                        +jTextField1.getText()+"',"
                        +"(SELECT strankaID FROM STRANKA where naziv='"+jComboBox5.getSelectedItem().toString()+"' and STRANKAID IN (select max(stranka.strankaid) strankaid from stranka GROUP BY NAZIV )),"
                        +"(SELECT PRODAJALECID FROM PRODAJALEC where ime='"+jTextField3.getText()+"'),"
                        +dan+","+mesec+","+leto+","
                        +danS+","+mesecS+","+letoS+","
                        +danZ+","+mesecZ+","+letoZ+",'"
                        +jTextField6.getText()+"',"
                        +"(SELECT NACIN_PLACILAID FROM NACIN_PLACILA where naziv='"+jComboBox2.getSelectedItem().toString()
                         + "'),'"
                        +jTextArea1.getText()
                        + "',"+null+");";
                
                }
                System.out.println("---*-: "+sqlQuery);
                isBad=s.execute(sqlQuery);
                
                
                for(int i=0;i<model.getRowCount();i++){
                    System.out.println("-----*-***nakup_izdelek insert");
                    sqlQuery = "insert into predracun_izdelek VALUES("
                        +null+ ",'"
                        +jTextField1.getText()+"',"
                        +model.getValueAt(i, 0)+",'"
                        +model.getValueAt(i, 2).toString().replace(',','.')+"',"    
                        +"(SELECT EMID FROM EM where mera='"+model.getValueAt(i, 3)+"'),"
                        +"(SELECT CENAID_FK FROM IZDELEK where IZDELEKID='"+model.getValueAt(i, 0)+"'),"
                        +"(SELECT DAVEKID FROM DAVEK where stopnja='"+model.getValueAt(i, 5) +"'),"    //.toString().replace(',','.')
                        +model.getValueAt(i, 6)
                        + ");";
                    System.out.println(sqlQuery);
                    isBad=s1.execute(sqlQuery);
                }    
                
            } 
            
            for(int i=0;i<model.getRowCount();i++){
                String minusnik=model.getValueAt(i, 2).toString().replace(',', '.');
                sqlQuery="UPDATE izdelek SET kolicina=(SELECT SUM(kolicina-"+minusnik+") as kolicinaSkupaj FROM izdelek WHERE  izdelekid='"+model.getValueAt(i, 0).toString()+"') WHERE izdelekid='"+model.getValueAt(i, 0).toString()+"';";
                System.out.println(sqlQuery);
                java.sql.Statement s3=null;
                s3 = c.createStatement ();
                isBad=s3.execute(sqlQuery);
            }
            
            s9 = c.createStatement ();
            rs9 = s9.executeQuery ("select naziv,kolicina from izdelek");

            jComboBox1.removeAllItems();
            while (rs9.next()) {
                jComboBox1.addItem(rs9.getFloat("kolicina"));
            }
             
            jMenu5.removeAll();
            s10 = c.createStatement ();
            rs10 = s10.executeQuery ("select * from dobavnica where nakupid_fk IS NULL");
            int i=0;
            if(rs10.isBeforeFirst()){
                while (rs10.next()) {
                    String labela = rs10.getString("dobavnicaID")+": "+rs10.getString("dan")+"."+rs10.getString("mesecID_FK")+"."+rs10.getString("leto");
                    System.out.println(labela);
                    String ime="dobavnica"+i;
                    JMenuItem jMenuItemX= new JMenuItem(ime);
                    System.out.println(jMenuItemX.getName());
                    jMenuItemX.setText(labela);
                    jMenuItemX.setToolTipText(rs10.getString("dobavnicaID"));
                    final String dobavnicaid=rs10.getString("dobavnicaID");
                    jMenuItemX.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            naloziRacunPoDobavnici(dobavnicaid);
                        }
                    });
                    jMenu5.add(jMenuItemX);
                    i++;
                }
            }
                
            c.close();
            return !isBad;
            
        } catch (SQLException ex) {
            Logger.getLogger(GlavnoOkno.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
        
    }
    
    private void izracunajCelotniSkupniZnesek(){
        float vrednost=0;
        float vrednostDDv=0;
        float brezPopusta=0;
        for(int i=0;i<model.getRowCount();i++){
            String vrednostBrezDDv = model.getValueAt(i, 7).toString();
            String vrednostZDdv = model.getValueAt(i, 8).toString();
            vrednost+=Float.parseFloat(vrednostBrezDDv.replace(',', '.'));
            vrednostDDv+=Float.parseFloat(vrednostZDdv.replace(',', '.'));
            brezPopusta+=(Float.parseFloat(model.getValueAt(i, 2).toString().replace(',', '.')))*(Float.parseFloat(model.getValueAt(i, 4).toString().replace(',', '.')));
        }
        
        brezPopusta=(float)Math.round(brezPopusta * 100) / 100;
        String brezPopustaS=""+brezPopusta+"00";
        brezPopustaS=brezPopustaS.substring(0, brezPopustaS.indexOf('.')+3);
        jLabel29.setText(brezPopustaS.replace('.',','));
        
        vrednost=(float)Math.round(vrednost * 100) / 100;
        String vrednostS=""+vrednost+"00";
        vrednostS=vrednostS.substring(0, vrednostS.indexOf('.')+3);
        jLabel31.setText(vrednostS.replace('.',','));
        
        float ddv=vrednostDDv-vrednost;
        ddv=(float)Math.round(ddv * 100) / 100;
        String ddvS=""+ddv+"00";
        ddvS=ddvS.substring(0, ddvS.indexOf('.')+3);
        jLabel32.setText(ddvS.replace('.',','));
        
        vrednostDDv=(float)Math.round(vrednostDDv * 100) / 100;
        String vrednostDDvS=""+vrednostDDv+"00";
        vrednostDDvS=vrednostDDvS.substring(0, vrednostDDvS.indexOf('.')+3);
        jLabel33.setText(vrednostDDvS.replace('.',','));
        
        float popust = brezPopusta-vrednost;
        popust=(float)Math.round(popust * 100) / 100;
        String popustS=""+popust+"00";
        popustS=popustS.substring(0, popustS.indexOf('.')+3);
        jLabel30.setText(popustS.replace('.',','));
        
        
    }
    
    private void izracunajSkupniZnesek(){
        setEditableToTrue();
        
        float skupaj,kolicina,cena,ddv,popust,cenaZddv,skupajBrezDdv;
        try {
            kolicina = Float.parseFloat(jTextField7.getText().replace(',', '.'));
            cena=Float.parseFloat(jTextField8.getText().replace(',', '.'));
            ddv=Float.parseFloat(jComboBox8.getSelectedItem().toString());
            popust=Float.parseFloat(jTextField9.getText().replace(',', '.'));
            
            cenaZddv=cena+(cena*ddv/100);
            if(popust==0){
                skupaj=kolicina*cenaZddv;
                skupajBrezDdv=kolicina*cena;
            }else{
                skupaj=kolicina*((cenaZddv)-(cenaZddv*popust/100));
                skupajBrezDdv=kolicina*((cena)-(cena*popust/100));
            }
            float skupajF=(float)Math.round(skupaj * 100) / 100;
            float skupajBrezDdvF=(float)Math.round(skupajBrezDdv * 100) / 100;
            String skupajS=Float.toString(skupajF)+"00";
            skupajS=skupajS.substring(0, skupajS.indexOf('.')+3);
            skupajS=skupajS.replace('.',',');
            String skupajBrezDdvS=Float.toString(skupajBrezDdvF)+"00";
            skupajBrezDdvS=skupajBrezDdvS.substring(0, skupajBrezDdvS.indexOf('.')+3);
            skupajBrezDdvS=skupajBrezDdvS.replace('.',',');
            jTextField10.setText(skupajS);
            jTextField11.setText(skupajBrezDdvS);
        }catch (Exception e) {
            Logger.getLogger(GlavnoOkno.class.getName()).log(Level.SEVERE, null, e);
        }
        setEditableToFalse();
    }
    
    public static boolean isNumeric(String str){
        str=str.replace(',', '.');
        try  
        {  
            Integer.parseInt(str);  
            return true;  
        }  
        catch(Exception e)  
        {  
            try  
            {  
                Float.parseFloat(str); 
                return true;  
            }  
            catch(Exception f)  
            {  
                return false;  
            }   
        }  
    }
    
    private void posodobiPodatkeOStranki(String nazivStranke){ 
        setEditableToTrue();
        try{

       
                java.sql.Driver d = null;
                java.sql.Connection c = null;
                java.sql.Statement s4 = null;
                java.sql.ResultSet rs4 = null;
            
                try {
                    c = java.sql.DriverManager.getConnection (Faktura.databaseURL, Faktura.user, Faktura.password);
                    System.out.println ("Connection established.");
                }
                catch (java.sql.SQLException e) {
                    System.out.println ("Unable to establish a connection through the driver manager.");
                }
            
            
                s4 = c.createStatement ();
                rs4 = s4.executeQuery ("select * from stranka INNER JOIN posta ON STRANKA.POSTNAST_FK=POSTA.POSTNAST where naziv='"+nazivStranke+"' "
                        + "and STRANKAID IN (select max(stranka.strankaid) strankaid from stranka GROUP BY NAZIV )");
  
                rs4.next();
               
                String naslov=rs4.getString("naslov");
                String postnast=rs4.getString("postnast_fk");
                String posta=rs4.getString("kraj");
                String imedrzave=rs4.getString("imedrzave_fk");
                String davcnastevilka=rs4.getString("davcnastevilka");
                int zapadlost=rs4.getInt("zapadlost");

                naloziPodatkeOStranki(nazivStranke,naslov,postnast, posta ,imedrzave,davcnastevilka,zapadlost);
        
                c.close();
            
            } catch (SQLException ex) {
                Logger.getLogger(GlavnoOkno.class.getName()).log(Level.SEVERE, null, ex);
            }
        setEditableToFalse();
    }
    
    private static String trimTrailingZeros(String number) {
        if(!number.contains(".0")) {
            return number;
        }

        return number.replaceAll(".?0*$", "");
    }
    
    private void naloziPodatkeOIzdelku(String nazivIzdelka){
        setEditableToTrue();
        try{
       
                java.sql.Driver d = null;
                java.sql.Connection c = null;
                java.sql.Statement s4 = null;
                java.sql.ResultSet rs4 = null;
            
                try {
                    c = java.sql.DriverManager.getConnection (Faktura.databaseURL, Faktura.user, Faktura.password);
                    System.out.println ("Connection established.");
                }
                catch (java.sql.SQLException e) {
                    System.out.println ("Unable to establish a connection through the driver manager.");
                }
            
            
                s4 = c.createStatement ();
                rs4 = s4.executeQuery ("select izdelek.izdelekid,em.mera,cena.vrednost,davek.stopnja from izdelek,em,cena,davek where (em.emid=izdelek.emid_fk) and (cena.cenaid=izdelek.cenaid_fk) and (davek.davekid=izdelek.davekid_fk) and izdelek.naziv='"+nazivIzdelka+"'");
  
                rs4.next();
                String izdelekID =rs4.getString(1);
                String emMera=rs4.getString(2);
                float cenaVrednost=rs4.getFloat(3);
                String davekStopnja=rs4.getString(4);
                
                jTextField5.setText(izdelekID);
                jComboBox7.setSelectedItem(emMera);
                jComboBox8.setSelectedItem(trimTrailingZeros(davekStopnja));
                String cenaF=String.format("%2f", cenaVrednost);
                cenaF=cenaF+"00";
                System.out.println(cenaF);
                cenaF=cenaF.substring(0, (cenaF.indexOf(",")+3));
                System.out.println(""+cenaF.indexOf(","));
                jTextField8.setText(cenaF);

                c.close();
            
            } catch (SQLException ex) {
                Logger.getLogger(GlavnoOkno.class.getName()).log(Level.SEVERE, null, ex);
            }
        setEditableToFalse();
    }

    
    public void naloziVse(){
        setEditableToTrue();
        
        jComboBox1.setVisible(false);
        
        DateFormat df = new SimpleDateFormat("dd.MM.yyyy"); 
        dateChooserCombo1.setDateFormat(df);
        dateChooserCombo2.setDateFormat(df);
        dateChooserCombo3.setDateFormat(df);
        
        jTextField3.setText(Faktura.uporabnikGlobal);
        
        model=new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Šifra", "Naziv", "Količina", "EM", "Cena brez DDV", "DDV(%)", "Popust(%)", "Vrednost brez DDV", "Vrednost z DDV"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        };
        jTable2.setModel(model);
        
        // prikaz zadnjega računa
        try{
       
            java.sql.Driver d = null;
            java.sql.Connection c = null;
            java.sql.Statement s,s2,s3,s4,s5,s6,s7,s8,s9,s10 = null;
            java.sql.ResultSet rs,rs2,rs3,rs4,rs5,rs6,rs7,rs8,rs9,rs10 = null;
            
            try {
              c = java.sql.DriverManager.getConnection (Faktura.databaseURL, Faktura.user, Faktura.password);
              System.out.println ("Connection established.");
            }
            catch (java.sql.SQLException e) {
              System.out.println ("Unable to establish a connection through the driver manager.");
            }
            
                       
            Calendar current = dateChooserCombo1.getCurrent();
            int leto=current.get(1);
            
            s = c.createStatement ();
            rs = s.executeQuery ("select * from nakup where leto='"+leto+"' order by nakupid desc");
            
            if(jComboBox9.getSelectedItem().toString().equals("računa")){
                if(!(rs.isBeforeFirst())){
                    System.out.println ("ni izdanih računov-------------------------------------------------");
                    jTextField1.setText(leto+"-00001");
                
                }else{
                    rs.next();
                    String zadnjiIzdanRacun = rs.getString("nakupid");
                    jLabel10.setText("Zadnji izdan račun: ".concat(zadnjiIzdanRacun));
                    String stPrejsnjega=zadnjiIzdanRacun.substring(zadnjiIzdanRacun.indexOf("-")+1, zadnjiIzdanRacun.length());
                    int stPrejsnjegaI=Integer.parseInt(stPrejsnjega);
                    stPrejsnjegaI++;
                    String novaSt="0000"+stPrejsnjegaI;
                    novaSt=novaSt.substring(novaSt.length()-5, novaSt.length());
                    jTextField1.setText(leto+"-"+novaSt);
                }
            }
            
            s4 = c.createStatement ();
            rs4 = s4.executeQuery ("SELECT * FROM STRANKA INNER JOIN posta ON STRANKA.POSTNAST_FK=POSTA.POSTNAST WHERE STRANKAID IN (select max(stranka.strankaid) strankaid from stranka GROUP BY NAZIV ) order by strankaid asc");
            jComboBox5.removeAllItems();
            rs4.next();
            if(!rs4.isLast()){
                rs4.next(); //ne pokaze kupca pod id=0 <---koncni kupec /razen ce je to edina stranka
            }
            String naziv=rs4.getString("naziv");
            String naslov=rs4.getString("naslov");
            String postnast=rs4.getString("postnast_fk");
            String posta=rs4.getString("kraj");
            String imedrzave=rs4.getString("imedrzave_fk");
            String davcnastevilka=rs4.getString("davcnastevilka");
            int zapadlost=rs4.getInt("zapadlost");
            
            jComboBox5.addItem(naziv);
            
            while (rs4.next()) {
                jComboBox5.addItem(rs4.getString("naziv"));
            }
            
            
            naloziPodatkeOStranki(naziv,naslov,postnast,posta,imedrzave,davcnastevilka,zapadlost);
        
            s5 = c.createStatement ();
            rs5 = s5.executeQuery ("select * from nacin_placila");
            
            jComboBox2.removeAllItems();
            while (rs5.next ()) {
                String placilo = rs5.getString("naziv");
                System.out.println (placilo);
                jComboBox2.addItem(placilo);
            }
            
            s6 = c.createStatement ();
            rs6 = s6.executeQuery ("select * from nastavitve where naziv='prejsnjiKraj'");
            
            
            if(!(rs6.isBeforeFirst())){
                System.out.println ("ni podatkov o prejsnjem kraju-------------------------------------------------");
            }else{
                rs6.next();
                jTextField6.setText(rs6.getString("VREDNOSTSTRING"));
            }
            
            s7 = c.createStatement ();
            rs7 = s7.executeQuery ("select * from davek");
            
            jComboBox8.removeAllItems();
            while (rs7.next ()) {
                float davek = rs7.getFloat("stopnja");
                String davekS = ""+davek;
                System.out.println (trimTrailingZeros(davekS));
                jComboBox8.addItem(trimTrailingZeros(davekS));
            }
            
            s8 = c.createStatement ();
            rs8 = s8.executeQuery ("select * from em");
            
            jComboBox7.removeAllItems();
            while (rs8.next()) {
                String em = rs8.getString("mera");
                System.out.println (em);
                jComboBox7.addItem(em);
            }
            
            s9 = c.createStatement ();
            rs9 = s9.executeQuery ("select naziv,kolicina from izdelek");
            
            jComboBox6.removeAllItems();
            jComboBox1.removeAllItems();
            rs9.next();
            String nazivPrvegaIzdelka=rs9.getString("naziv");
            jComboBox6.addItem(nazivPrvegaIzdelka);
            jComboBox1.addItem(rs9.getFloat("kolicina"));
            
            while (rs9.next()) {
                String nazivIzdelka = rs9.getString("naziv");
                System.out.println (nazivIzdelka);
                jComboBox6.addItem(nazivIzdelka);
                jComboBox1.addItem(rs9.getFloat("kolicina"));
            }
            
            naloziPodatkeOIzdelku(nazivPrvegaIzdelka);
            
            if((isNumeric(jTextField7.getText()))&&(isNumeric(jTextField8.getText()))&&(isNumeric(jTextField9.getText())))
            {
                izracunajSkupniZnesek();
            }
            

            jMenu5.removeAll();
            s10 = c.createStatement ();
            rs10 = s10.executeQuery ("select * from dobavnica where nakupid_fk IS NULL");
            int i=0;
            if(rs10.isBeforeFirst()){
                while (rs10.next()) {
                    String labela = rs10.getString("dobavnicaID")+": "+rs10.getString("dan")+"."+rs10.getString("mesecID_FK")+"."+rs10.getString("leto");
                    System.out.println(labela);
                    String ime="dobavnica"+i;
                    JMenuItem jMenuItemX= new JMenuItem(ime);
                    System.out.println(jMenuItemX.getName());
                    jMenuItemX.setText(labela);
                    jMenuItemX.setToolTipText(rs10.getString("dobavnicaID"));
                    final String dobavnicaid=rs10.getString("dobavnicaID");
                    jMenuItemX.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            naloziRacunPoDobavnici(dobavnicaid);
                        }
                    });
                    jMenu5.add(jMenuItemX);
                    i++;
                }
            }
            
        
        c.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(GlavnoOkno.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        aliNalozimVse=false;
        setEditableToFalse();
        
    }
    
    
    
    private void nastaviRokPlacila(int zapadlost){
        //nastavi rok placila glede na zapadlost
        
        Calendar current = dateChooserCombo1.getCurrent();
        
        System.out.println(""+current.get(1)); //leto
        System.out.println(""+current.get(2)); //-1
        System.out.println(""+current.get(5)); //dan
        System.out.println("***---***---***---------------------------***********************");
        
        int dan=current.get(5);
        int mesec=current.get(2);
        int leto=current.get(1);
        
        dan+=zapadlost;
        
        while(((dan>28) && (mesec+1==2))||((dan>30) && ((mesec+1==4)||(mesec+1==6)||(mesec+1==9)||(mesec+1==11)))||((dan>31) && ((mesec+1==1)||(mesec+1==3)||(mesec+1==5)||(mesec+1==7)||(mesec+1==8)||(mesec+1==10)||(mesec+1==12)))){
            while((dan>28) && (mesec+1==2)){
                mesec++;
                dan-=28;
                System.out.println("28**: "+dan+"."+(mesec+1)+"."+leto);
            }
                
            while((dan>30) && ((mesec+1==4)||(mesec+1==6)||(mesec+1==9)||(mesec+1==11))){
                mesec++;
                dan-=30;
                System.out.println("30**: "+dan+"."+(mesec+1)+"."+leto);
            }
                
            while((dan>31) && ((mesec+1==1)||(mesec+1==3)||(mesec+1==5)||(mesec+1==7)||(mesec+1==8)||(mesec+1==10)||(mesec+1==12))){
                mesec++;
                dan-=31;
                System.out.println("31**: "+dan+"."+(mesec+1)+"."+leto);
            }
        }
        
        while(mesec+1>12){
            mesec-=12;
            leto++;
        }
        
        System.out.println("Zapade: "+dan+"."+(mesec+1)+"."+leto);        
        dateChooserCombo3.setText(""+dan+"."+(mesec+1)+"."+leto);
        
    }
    
    private void naloziPodatkeOStranki(String naziv, String naslov, String postnast, String posta, String imedrzave, String davcnastevilka, int zapadlost){
        setEditableToTrue();
        jTextField4.setText(naslov);
        jTextField13.setText(postnast);
        jTextField14.setText(posta);
        jTextField15.setText(imedrzave);
        jTextField2.setText(davcnastevilka);
        nastaviRokPlacila(zapadlost);
        setEditableToFalse();
    }
    
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        doOnKoncniKupecSelectedChange();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private int izdelekZeDodan(String izdelekid){
        for(int i=0;i<model.getRowCount();i++){
            if(model.getValueAt(i, 0).toString().equals(izdelekid)){
                return i;
            }
        }
        return -1;
    }
    
    private void dodajIzdelekNaRacun(){
        setEditableToTrue();
        int izd=izdelekZeDodan(jTextField5.getText());
        if((model.getRowCount()>0)&&(izd>=0)){
            String tmp=jTextField7.getText();
            float skupajF=Float.parseFloat(jTextField7.getText().replace(',','.'))+Float.parseFloat(model.getValueAt(izd,2).toString().replace(',','.'));
            jTextField7.setText(Float.toString(skupajF).replace('.', ','));
            if(Float.parseFloat(jTextField7.getText().replace(',', '.'))>Float.parseFloat(jComboBox1.getItemAt(jComboBox6.getSelectedIndex()).toString())){
                jTextField7.setText(tmp);
                JOptionPane.showMessageDialog(rootPane, "Vnesli ste preveliko število. Zaloga tega izdelka je: "+jComboBox1.getItemAt(jComboBox6.getSelectedIndex()).toString().replace('.', ','));
                return;
            }
            izracunajSkupniZnesek();
            model.removeRow(izd);
            model.insertRow(izd,new String[]{jTextField5.getText(),jComboBox6.getSelectedItem().toString(),jTextField7.getText(),jComboBox7.getSelectedItem().toString(),jTextField8.getText(),jComboBox8.getSelectedItem().toString(),jTextField9.getText(),jTextField11.getText(),jTextField10.getText()});
            jTextField7.setText(tmp);
        }else{
            model.insertRow(jTable2.getRowCount(),new String[]{jTextField5.getText(),jComboBox6.getSelectedItem().toString(),jTextField7.getText(),jComboBox7.getSelectedItem().toString(),jTextField8.getText(),jComboBox8.getSelectedItem().toString(),jTextField9.getText(),jTextField11.getText(),jTextField10.getText()});
        }
        izracunajCelotniSkupniZnesek();
        setEditableToFalse();
    }
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        dodajIzdelekNaRacun();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jComboBox5ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox5ItemStateChanged
        // TODO add your handling code here:     
        if((evt.getStateChange() == ItemEvent.SELECTED)&&(jComboBox5.getItemCount()>1)){
            posodobiPodatkeOStranki(jComboBox5.getSelectedItem().toString());
        }
    }//GEN-LAST:event_jComboBox5ItemStateChanged

    private void jTextField7KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField7KeyReleased
        // TODO add your handling code here:
        setEditableToTrue();
        if(jTextField7.getText().isEmpty()){
            return;
        }
        
        if(Float.parseFloat(jTextField7.getText().replace(',', '.'))>Float.parseFloat(jComboBox1.getItemAt(jComboBox6.getSelectedIndex()).toString())){
            JOptionPane.showMessageDialog(rootPane, "Vnesli ste preveliko število. Zaloga tega izdelka je: "+jComboBox1.getItemAt(jComboBox6.getSelectedIndex()).toString().replace('.', ','));
            jTextField7.setText(jComboBox1.getItemAt(jComboBox6.getSelectedIndex()).toString().replace('.', ','));
        }
        
        if(isNumeric(jTextField7.getText())){
            if((isNumeric(jTextField8.getText()))&&(isNumeric(jTextField9.getText())))
            {
                izracunajSkupniZnesek();
            }
        }else{
            jTextField7.setText(jTextField7.getText().substring(0, jTextField7.getText().length()-1));
        }
        setEditableToFalse();
    }//GEN-LAST:event_jTextField7KeyReleased

    private void jTextField9KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField9KeyReleased
        // TODO add your handling code here:
        setEditableToTrue();
        if(jTextField9.getText().isEmpty()){
            return;
        }
        if(isNumeric(jTextField9.getText())){
            if((isNumeric(jTextField8.getText()))&&(isNumeric(jTextField7.getText())))
            {
                izracunajSkupniZnesek();
            }
        }else{
            jTextField9.setText(jTextField9.getText().substring(0, jTextField9.getText().length()-1));
        }
        setEditableToFalse();
        
    }//GEN-LAST:event_jTextField9KeyReleased

    private void jComboBox6ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox6ItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange()==ItemEvent.SELECTED){
            naloziPodatkeOIzdelku(jComboBox6.getSelectedItem().toString());
        }
        if((isNumeric(jTextField7.getText()))&&(isNumeric(jTextField8.getText()))&&(isNumeric(jTextField9.getText())))
        {
            izracunajSkupniZnesek();
        }
    }//GEN-LAST:event_jComboBox6ItemStateChanged

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        if(jTable2.getSelectedRowCount()>0){
            model.removeRow(jTable2.getSelectedRow());
            izracunajCelotniSkupniZnesek();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    public static void changeFont ( Component component, Font font )
    {
    component.setFont ( font );
    if ( component instanceof Container )
    {
        for ( Component child : ( ( Container ) component ).getComponents () )
        {
            changeFont ( child, font );
        }
    }
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.setLocationRelativeTo(null); //centriram okno
        //Font f1 = jLabel1.getFont();
        //Font f1 = new Font("Serif", Font.PLAIN, 10);
        //changeFont(this,f1);
        //this.setExtendedState( this.getExtendedState()|java.awt.Frame.MAXIMIZED_BOTH );//maximiziram
        naloziVse();
        jCheckBox1.setSelected(true);
        doOnKoncniKupecSelectedChange();
        if(Faktura.testMode==true){
            this.setTitle("UrbanSoftware Faktura - TEST MODE");
        }
               
    }//GEN-LAST:event_formWindowOpened

    private void jComboBox9ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox9ItemStateChanged
        // TODO add your handling code here:
        setEditableToTrue();
        jTextField12.setText(null);
        try{
       
            java.sql.Driver d = null;
            java.sql.Connection c = null;
            java.sql.Statement s = null;
            java.sql.ResultSet rs = null;
            
            try {
              c = java.sql.DriverManager.getConnection (Faktura.databaseURL, Faktura.user, Faktura.password);
              System.out.println ("Connection established.");
            }
            catch (java.sql.SQLException e) {
              System.out.println ("Unable to establish a connection through the driver manager.");
            }
            
            Calendar current = dateChooserCombo1.getCurrent();
            int leto=current.get(1);
            s = c.createStatement ();
            
            if(jComboBox9.getSelectedItem().toString()=="računa"){
                jLabel35.setEnabled(true);
                jTextField12.setEnabled(true); 
                rs = s.executeQuery ("select nakupid AS maxnakupid from nakup where leto='"+leto+"' order by nakupid desc");
            
                if(!(rs.isBeforeFirst())){
                    System.out.println ("ni izdanih računov-------------------------------------------------");
                     jLabel10.setText("Zadnji izdan račun: ni izdanih računov");
                    jTextField1.setText(leto+"-00001");
                
                }else{
                    rs.next();
                    String zadnjiIzdanRacun = rs.getString("maxnakupid");
                    jLabel10.setText("Zadnji izdan račun: ".concat(zadnjiIzdanRacun));
                    String stPrejsnjega=zadnjiIzdanRacun.substring(zadnjiIzdanRacun.indexOf("-")+1, zadnjiIzdanRacun.length());
                    int stPrejsnjegaI=Integer.parseInt(stPrejsnjega);
                    stPrejsnjegaI++;
                    String novaSt="0000"+stPrejsnjegaI;
                    novaSt=novaSt.substring(novaSt.length()-5, novaSt.length());
                    jTextField1.setText(leto+"-"+novaSt);
                }
            }else if(jComboBox9.getSelectedItem().toString()=="dobavnice"){
                jLabel35.setEnabled(false);
                jTextField12.setEnabled(false);
                rs = s.executeQuery ("select dobavnicaid as maxdobavnicaid from dobavnica where leto='"+leto+"' order by dobavnicaid desc");
            
                if(!(rs.isBeforeFirst())){
                    System.out.println ("ni izdanih računov-------------------------------------------------");
                    jLabel10.setText("Zadnja izdana dobavnica: ni izdanih dobavnic");
                    jTextField1.setText(leto+"-00001D");
                
                }else{
                    rs.next();
                    String zadnjiIzdanRacun = rs.getString("maxdobavnicaid");
                    jLabel10.setText("Zadnja izdana dobavnica: ".concat(zadnjiIzdanRacun));
                    String stPrejsnjega=zadnjiIzdanRacun.substring(zadnjiIzdanRacun.indexOf("-")+1, zadnjiIzdanRacun.length()-1);
                    int stPrejsnjegaI=Integer.parseInt(stPrejsnjega);
                    stPrejsnjegaI++;
                    String novaSt="0000"+stPrejsnjegaI;
                    novaSt=novaSt.substring(novaSt.length()-5, novaSt.length());
                    jTextField1.setText(leto+"-"+novaSt+"D");
                }
            }else if(jComboBox9.getSelectedItem().toString()=="predračuna"){
                jLabel35.setEnabled(false);
                jTextField12.setEnabled(false);
                rs= s.executeQuery ("select predracunid AS maxpredracunid from predracun where leto='"+leto+"' order by predracunid desc");
            
                if(!(rs.isBeforeFirst())){
                    System.out.println ("ni izdanih računov-------------------------------------------------");
                    jLabel10.setText("Zadnji izdan predračun: ni izdanih predračunov");
                    jTextField1.setText(leto+"-00001P");
                
                }else{
                    rs.next();
                    String zadnjiIzdanRacun = rs.getString("maxpredracunid");
                    jLabel10.setText("Zadnji izdan predračun: ".concat(zadnjiIzdanRacun));
                    String stPrejsnjega=zadnjiIzdanRacun.substring(zadnjiIzdanRacun.indexOf("-")+1, zadnjiIzdanRacun.length()-1);
                    int stPrejsnjegaI=Integer.parseInt(stPrejsnjega);
                    stPrejsnjegaI++;
                    String novaSt="0000"+stPrejsnjegaI;
                    novaSt=novaSt.substring(novaSt.length()-5, novaSt.length());
                    jTextField1.setText(leto+"-"+novaSt+"P");
                }
            }  
                
            c.close();
            
        } catch (SQLException ex) {
            Logger.getLogger(GlavnoOkno.class.getName()).log(Level.SEVERE, null, ex);
        }
        setEditableToFalse(); 
    }//GEN-LAST:event_jComboBox9ItemStateChanged

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        if(model.getRowCount()<=0){
            JOptionPane.showMessageDialog(rootPane, "Na računu mora biti vsaj en izdelek! Izdelke dodate z gumbom +.");
            return;
        }
        
        if(!(jTextField1.getText().isEmpty())){            
            if(shraniRacun(jComboBox9.getSelectedItem().toString())){
                natisniRacun();
                novRacun();
                JOptionPane.showMessageDialog(rootPane, "Račun uspešno dodan.");
            }else{
                JOptionPane.showMessageDialog(rootPane, "Računa ni bilo mogoče dodati. Prosimo preverite številko računa!");
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "Prosimo vnesite številko računa");
        }
        
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        new MesecniIzpis().setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        new DnevniIzpis().setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        new PregledRacunov().setVisible(true);
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        if(Faktura.adminMode){
            new DodajStranko().setVisible(true);
        }else if(avtentikacijaAdministratorja()){
            new DodajStranko().setVisible(true);
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        if(Faktura.adminMode){
            new UrediStranko().setVisible(true);
        }else if(avtentikacijaAdministratorja()){
            new UrediStranko().setVisible(true);
        }
        
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        if(aliNalozimVse){
            naloziVse();
        }
    }//GEN-LAST:event_formWindowActivated

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        if(Faktura.adminMode){
            new DodajIzdelek().setVisible(true);
        }else if(avtentikacijaAdministratorja()){
            new DodajIzdelek().setVisible(true);
        }
        
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        if(Faktura.adminMode){
            new UrediIzdelek().setVisible(true);
        }else if(avtentikacijaAdministratorja()){
            new UrediIzdelek().setVisible(true);
        }
        
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        new IzpisZaloge().setVisible(true);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void dateChooserCombo1OnSelectionChange(datechooser.events.SelectionChangedEvent evt) {//GEN-FIRST:event_dateChooserCombo1OnSelectionChange
        // TODO add your handling code here:
        doOnKoncniKupecSelectedChange();
    }//GEN-LAST:event_dateChooserCombo1OnSelectionChange

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        if(Faktura.adminMode){
            if(spremeniAdministratorjevoGeslo()){
                JOptionPane.showMessageDialog(rootPane,"Administratorsko geslo uspešno spremenjeno.");
            }
        }else if(avtentikacijaAdministratorja()){
            if(spremeniAdministratorjevoGeslo()){
                JOptionPane.showMessageDialog(rootPane,"Administratorsko geslo uspešno spremenjeno.");
            }else{
                JOptionPane.showMessageDialog(rootPane,"Gesla ni bilo mogoče spremeniti!.");
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(rootPane,"Avtor: Urban Kravos\npowered by: Urban Software\nurban.kravos@gmail.com\nVersion: 1.0");
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private boolean spremeniAdministratorjevoGeslo(){
            JPasswordField pwd = new JPasswordField(10);  
            int action = JOptionPane.showConfirmDialog(null, pwd,"NOVO administratorsko geslo",JOptionPane.OK_CANCEL_OPTION); 
            String adminPass=new String(pwd.getPassword());
            
            boolean isBad = true;
            if(!(Faktura.notEmpty(adminPass))){
            return !isBad;
            }
            
            try{

                java.sql.Driver d = null;
                java.sql.Connection c = null;
                java.sql.Statement s = null;
                
            
                try {
                    c = java.sql.DriverManager.getConnection (Faktura.databaseURL, Faktura.user, Faktura.password);
                    System.out.println ("Connection established.");
                }
                catch (java.sql.SQLException e) {
                    System.out.println ("Unable to establish a connection through the driver manager.");
                }
            
                s = c.createStatement ();
                isBad = s.execute("UPDATE nastavitve SET vrednoststring='"+adminPass+"' WHERE naziv='adminPass'");

                c.close();
            
            } catch (SQLException ex) {
                Logger.getLogger(GlavnoOkno.class.getName()).log(Level.SEVERE, null, ex);
                return false;
            }
            return !isBad;
    }
    
    //@Override
    public int print (Graphics graphics, PageFormat pageFormat, int pageIndex) {
        
        if (pageIndex > 0) { /* We have only one page, and 'page' is zero-based */
            return NO_SUCH_PAGE;
        }
        
        Font fN = new Font("SansSerif", Font.PLAIN, 10);
        Font fBtitle = new Font("SansSerif", Font.BOLD, 16);
        
        
        Graphics2D graphics2D = (Graphics2D) graphics;
        graphics.setFont(fN);
        FontMetrics fNm = graphics.getFontMetrics(fN);
        //595-50-fNm.stringWidth("Vinogradnik")
        
        String printerTip="printer80mm";
        if(printerTip=="A4"){
        
            graphics2D.drawString("Vinogradnik", 595-50-fNm.stringWidth("Davčna številka: 27273881"), 45);
            graphics2D.drawString("Žarn Jožef s.p.", 595-50-fNm.stringWidth("Davčna številka: 27273881"), 60);
            graphics2D.drawString("Gorjanska cesta 17", 595-50-fNm.stringWidth("Davčna številka: 27273881"), 75);
            graphics2D.drawString("8311 Kostanjevica na Krki", 595-50-fNm.stringWidth("Davčna številka: 27273881"), 90);
            graphics2D.drawString("Davčna številka: 27273881", 595-50-fNm.stringWidth("Davčna številka: 27273881"), 105);
        
            graphics2D.drawLine(20, 115, 595-20, 115);
            graphics2D.drawLine(20, 116, 595-20, 116);
        
            graphics.setFont(new Font("SansSerif", Font.BOLD, 10));
            graphics2D.drawString("Kupec:", 50, 130);
            graphics.setFont(fN);
        
            if(jCheckBox1.isSelected()){
                graphics2D.drawString("Končni kupec", 50, 155);
            }else{
                graphics2D.drawString(jComboBox5.getSelectedItem().toString(), 50, 155);
                graphics2D.drawString(jTextField4.getText(), 50, 170);
                graphics2D.drawString(jTextField13.getText()+" "+jTextField14.getText(), 50, 185);
                graphics2D.drawString(jTextField15.getText(), 50, 200);
                graphics2D.drawString("Davčna številka: "+jTextField2.getText(), 50, 215);
            }
        
            graphics.setFont(fBtitle);
            if(jComboBox9.getSelectedItem().toString()=="računa"){
                //graphics2D.drawString("RAČUN št.: "+jTextField1.getText(), 330, 140);
                graphics2D.drawString("RAČUN št.: "+jTextField1.getText(), 330, 140);
            }else if(jComboBox9.getSelectedItem().toString()=="dobavnice"){
                graphics2D.drawString("DOBAVNICA št.: "+jTextField1.getText(), 330, 140);
            }else if(jComboBox9.getSelectedItem().toString()=="predračuna"){
                graphics2D.drawString("PREDRAČUN št.: "+jTextField1.getText(), 330, 140);
            }
            graphics.setFont(fN);
            graphics2D.drawString("Kraj izdaje:", 330, 170);
            graphics2D.drawString("Datum izdaje:", 330, 185);
            graphics2D.drawString("Datum storitve:", 330, 200);
            graphics2D.drawString("Rok plačila:", 330, 215);
            graphics2D.drawString("Prodajalec/ka:", 330, 230);
            graphics2D.drawString("Način plačila:", 330, 245);
  
            graphics2D.drawString(jTextField6.getText(), 420, 170);
            graphics2D.drawString(dateChooserCombo1.getText(), 420, 185);
            graphics2D.drawString(dateChooserCombo1.getText(), 420, 200);
            graphics2D.drawString(dateChooserCombo1.getText(), 420, 215);
            graphics2D.drawString(jTextField3.getText(), 420, 230);
            graphics2D.drawString(jComboBox2.getSelectedItem().toString(), 420, 245);
            graphics2D.drawLine(50, 240+30, 595-50, 240+30);
        
            graphics2D.drawString("Šifra", 50, 255+30);
            graphics2D.drawString("Naziv", 100, 255+30);
            graphics2D.drawString("Količina", 205, 255+30);
            graphics2D.drawString("EM", 255, 255+30);
            graphics2D.drawString("Cena", 295, 255+30);
            graphics2D.drawString("DDV", 345, 255+30);
            graphics2D.drawString("Popust", 385, 255+30);
            graphics2D.drawString("Vrednost", 435, 255+30);
            graphics2D.drawString("Vrednost", 595-50-fNm.stringWidth("Vrednost"), 255+30);
        
        
            graphics2D.drawString("%", 345+(fNm.stringWidth("DDV")/2)-1, 270+30);
            graphics2D.drawString("%", 385+(fNm.stringWidth("Popust")/2)-1, 270+30);
            graphics2D.drawString("brez DDV", 435, 270+30);
            graphics2D.drawString("z DDV", 595-50-(fNm.stringWidth("Vrednost")), 270+30);
            graphics2D.drawLine(50, 275+30, 595-50, 275+30);
        
            int h1=290+30;
            int i;
            for(i=0;i<model.getRowCount();i++){           
                graphics2D.drawString(model.getValueAt(i, 0).toString(), 50, h1+(i*15));
                graphics2D.drawString(model.getValueAt(i, 1).toString(), 100, h1+(i*15));
                graphics2D.drawString(model.getValueAt(i, 2).toString(), 205, h1+(i*15));
                graphics2D.drawString(model.getValueAt(i, 3).toString(), 255, h1+(i*15));
                graphics2D.drawString(model.getValueAt(i, 4).toString(), 295, h1+(i*15));
                graphics2D.drawString(model.getValueAt(i, 5).toString(), 345, h1+(i*15));
                graphics2D.drawString(model.getValueAt(i, 6).toString(), 385, h1+(i*15));
                graphics2D.drawString(model.getValueAt(i, 7).toString(), 435, h1+(i*15));
                graphics2D.drawString(model.getValueAt(i, 8).toString(), 595-50-fNm.stringWidth("Vrednost"), h1+(i*15));    
            }
            graphics2D.drawLine(50, h1+(i*15)-5, 595-50, h1+(i*15)-5);
            int h2=h1+(i*15)+15;
        
            graphics2D.drawString("Skupaj brez popusta:", 350, h2);
            graphics2D.drawString("Znesek popusta:", 350, h2+15);
            graphics2D.drawString("Osnova za DDV:", 350, h2+30);
            graphics2D.drawString("Znesek DDV:", 350, h2+45);
            graphics.setFont(new Font("SansSerif", Font.BOLD, 10));
            graphics2D.drawString("Skupaj:", 350, h2+60);
            graphics.setFont(fN);
        
            graphics2D.drawString(jLabel29.getText(), 595-50-fNm.stringWidth(jLabel29.getText()), h2);
            graphics2D.drawString(jLabel30.getText(), 595-50-fNm.stringWidth(jLabel30.getText()), h2+15);
            graphics2D.drawString(jLabel31.getText(), 595-50-fNm.stringWidth(jLabel31.getText()), h2+30);
            graphics2D.drawString(jLabel32.getText(), 595-50-fNm.stringWidth(jLabel32.getText()), h2+45);
            graphics.setFont(new Font("SansSerif", Font.BOLD, 10));
            graphics2D.drawString(jLabel33.getText(), 595-50-fNm.stringWidth(jLabel33.getText()), h2+60);
            graphics.setFont(fN);
        
            graphics2D.drawString(jTextArea1.getText(), 50, h2+60+100);

        }else if(printerTip=="printer80mm"){
            
            int sirinaPmm=80;
            int sirinaPpx=(int)(sirinaPmm*2.83);
            
            int h1=30;
            graphics2D.drawString("Vinogradnik", 10, h1);
            graphics2D.drawString("Žarn Jožef s.p.", 10, h1+=15);
            graphics2D.drawString("Gorjanska cesta 17",10, h1+=15);
            graphics2D.drawString("8311 Kostanjevica na Krki", 10, h1+=15);
            graphics2D.drawString("Davčna številka: 27273881", 10, h1+=15);
            graphics2D.drawLine(5, h1+=10, sirinaPpx-5, h1);
            
            if(jComboBox9.getSelectedItem().toString()=="računa"){
                graphics2D.drawString("RAČUN št.: "+jTextField1.getText(), 10, h1+=25);
            }else if(jComboBox9.getSelectedItem().toString()=="dobavnice"){
                graphics2D.drawString("DOBAVNICA št.: "+jTextField1.getText(), 10, h1+=25);
            }else if(jComboBox9.getSelectedItem().toString()=="predračuna"){
                graphics2D.drawString("PREDRAČUN št.: "+jTextField1.getText(), 10, h1+=25);
            }
            
            graphics2D.drawString("Kraj izdaje: "+jTextField6.getText(), 10, h1+=15);
            graphics2D.drawString("Datum izdaje: "+dateChooserCombo1.getText(), 10, h1+=15);
            graphics2D.drawString("Datum storitve: "+dateChooserCombo2.getText(), 10, h1+=15);
            graphics2D.drawString("Rok plačila: "+dateChooserCombo3.getText(), 10, h1+=15);
            graphics2D.drawString("Prodajalec/ka: "+jTextField3.getText(), 10, h1+=15);
            graphics2D.drawString("Način plačila: "+jComboBox2.getSelectedItem().toString(), 10, h1+=15);
            if(jComboBox9.getSelectedItem().toString()=="računa"){
                if(jTextField12.getText().isEmpty()){
                    graphics2D.drawString("Veza na dobavnico št.: /", 10, h1+=15);
                }else{
                    graphics2D.drawString("Veza na dobavnico št.: "+jTextField12.getText(), 10, h1+=15);
                }
            }
            //graphics2D.drawLine(5, 225, sirinaPpx-5, 225);
            h1+=25;
            graphics2D.drawString("Šifra", 10, h1);
            graphics2D.drawString("Kol.", 50, h1);
            graphics2D.drawString("EM", 90, h1);
            graphics2D.drawString("Cena", 120, h1);
            graphics2D.drawString("brez DDV", 162, h1);
            h1+=15;
            graphics2D.drawString("Naziv", 10, h1);
            graphics2D.drawString("DDV", 80, h1);
            graphics2D.drawString("Popust", 121, h1);
            graphics2D.drawString("z DDV", 162, h1);
            
            graphics2D.drawLine(10, h1+=10, sirinaPpx-10, h1);
            
            
            h1+=10;//290
            int i;
            for(i=0;i<model.getRowCount();i++){           
                graphics2D.drawString(model.getValueAt(i, 0).toString(), 10, h1+15);
                graphics2D.drawString(model.getValueAt(i, 2).toString(), 50, h1+15);
                graphics2D.drawString(model.getValueAt(i, 3).toString(), 90, h1+15);
                graphics2D.drawString(model.getValueAt(i, 4).toString(), 120, h1+15);
                graphics2D.drawString(model.getValueAt(i, 7).toString(), 162, h1+15);                
                
                if(model.getValueAt(i, 1).toString().length()>12){
                    graphics2D.drawString(model.getValueAt(i, 1).toString().substring(0,11)+".", 10, h1+30);
                }else{
                    graphics2D.drawString(model.getValueAt(i, 1).toString(), 10, h1+30);
                }
                graphics2D.drawString(model.getValueAt(i, 5).toString()+"%", 80, h1+30);
                graphics2D.drawString(model.getValueAt(i, 6).toString()+"%", 121, h1+30);
                graphics2D.drawString(model.getValueAt(i, 8).toString(), 162, h1+30);  
                
                //graphics2D.drawLine(5, h1+35, sirinaPpx-5, h1+35);
                
                h1+=40;
            }
            graphics2D.drawLine(10, h1-5, sirinaPpx-10, h1-5);
            
            graphics2D.drawString("Skupaj brez popusta:", 10, h1+15);
            graphics2D.drawString("Znesek popusta:", 10, h1+30);
            graphics2D.drawString("Znesek brez DDV:", 10, h1+45);
            graphics2D.drawString("Znesek DDV:", 10, h1+60);
            graphics.setFont(new Font("SansSerif", Font.BOLD, 10));
            graphics2D.drawString("Skupaj:", 10, h1+75);
            graphics.setFont(fN);
            
            graphics2D.drawString(jLabel29.getText(), 162, h1+15);
            graphics2D.drawString(jLabel30.getText(), 162, h1+30);
            graphics2D.drawString(jLabel31.getText(), 162, h1+45);
            graphics2D.drawString(jLabel32.getText(), 162, h1+60);
            graphics.setFont(new Font("SansSerif", Font.BOLD, 10));
            graphics2D.drawString(jLabel33.getText(), 162, h1+75);
            graphics.setFont(fN);
            
            h1+=75;
            graphics2D.drawString("Kupec:", 10, h1+=30);
            if(jCheckBox1.isSelected()){
                graphics2D.drawString("Končni kupec", 10, h1+=15);
                h1+=60;
            }else{
                graphics2D.drawString(jComboBox5.getSelectedItem().toString(), 10, h1+=15);
                graphics2D.drawString(jTextField4.getText(), 10, h1+=15);
                graphics2D.drawString(jTextField13.getText()+" "+jTextField14.getText(), 10, h1+=15);
                graphics2D.drawString(jTextField15.getText(), 10, h1+=15);
                graphics2D.drawString("Davčna številka: "+jTextField2.getText(), 10, h1+=15);
            }
            
            graphics2D.drawString(jTextArea1.getText().substring(0, 27), 10, h1+=40);
            graphics2D.drawString(jTextArea1.getText().substring(28, jTextArea1.getText().length()), 10, h1+=15);
            
            h1=290+(model.getRowCount()*40)+265;
            graphics2D.drawLine(0, h1, sirinaPpx, h1);

        }
        
            
        return (PAGE_EXISTS);
   }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GlavnoOkno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GlavnoOkno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GlavnoOkno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GlavnoOkno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GlavnoOkno().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private datechooser.beans.DateChooserCombo dateChooserCombo1;
    private datechooser.beans.DateChooserCombo dateChooserCombo2;
    private datechooser.beans.DateChooserCombo dateChooserCombo3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JComboBox jComboBox6;
    private javax.swing.JComboBox jComboBox7;
    private javax.swing.JComboBox jComboBox8;
    private javax.swing.JComboBox jComboBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
