/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package faktura;

import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.*;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author radicalb
 */
public class IzpisZaloge extends javax.swing.JFrame implements Printable {

    /**
     * Creates new form IzpisZaloge
     */
    public IzpisZaloge() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Natisni");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Osveži");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public int print (Graphics graphics, PageFormat pageFormat, int pageIndex) {
        
        if (pageIndex > 0) { /* We have only one page, and 'page' is zero-based */
            return NO_SUCH_PAGE;
        }
        
        Font fN = new Font("SansSerif", Font.PLAIN, 10);
        Font fBtitle = new Font("SansSerif", Font.BOLD, 16);
          
        Graphics2D graphics2D = (Graphics2D) graphics;
        graphics.setFont(fN);
        FontMetrics fNm = graphics.getFontMetrics(fN);
        
        String printerTip="printer80mm";
        if(printerTip=="A4"){
            int sirinaPpx=595;
            
            graphics2D.drawString("Vinogradnik", 595-50-fNm.stringWidth("Davčna številka: 27273881"), 45);
            graphics2D.drawString("Žarn Jožef s.p.", 595-50-fNm.stringWidth("Davčna številka: 27273881"), 60);
            graphics2D.drawString("Gorjanska cesta 17", 595-50-fNm.stringWidth("Davčna številka: 27273881"), 75);
            graphics2D.drawString("8311 Kostanjevica na Krki", 595-50-fNm.stringWidth("Davčna številka: 27273881"), 90);
            graphics2D.drawString("Davčna številka: 27273881", 595-50-fNm.stringWidth("Davčna številka: 27273881"), 105);
        
            graphics2D.drawLine(20, 115, 595-20, 115);
            graphics2D.drawLine(20, 116, 595-20, 116);
            
            Calendar now = GregorianCalendar.getInstance();
            int ura=(now.get(Calendar.AM_PM)==1)?(now.get(Calendar.HOUR)+12):(now.get(Calendar.HOUR));
            ura=ura%24;
           
            int h1=140;
            graphics.setFont(fBtitle);
            graphics2D.drawString("IZPIS ZALOGE DNE: "+now.get(Calendar.DAY_OF_MONTH)+"."+(now.get(Calendar.MONTH)+1)+"."+now.get(Calendar.YEAR)+" ob "+ura+":"+now.get(Calendar.MINUTE), 50, h1);
            graphics.setFont(fN);
            
            
            graphics2D.drawLine(20, h1+=10, 595-20, h1);
           
            
            for(int i=0;i<model.getRowCount();i++){
               h1+=15;
               graphics2D.drawString(jTable1.getValueAt(i, 0).toString(),50,h1);  
               graphics2D.drawString(jTable1.getValueAt(i, 1).toString(),(sirinaPpx/2)-100,h1);  
               graphics2D.drawString(jTable1.getValueAt(i, 2).toString(),sirinaPpx-200,h1);
               graphics2D.drawString(jTable1.getValueAt(i, 3).toString(),sirinaPpx-80,h1);
            }
            
            graphics2D.drawLine(20, h1+=10, sirinaPpx-20, h1);

        }else if(printerTip=="printer80mm"){
            
            int sirinaPmm=80;
            int sirinaPpx=(int)(sirinaPmm*2.83);
            
            int h1=30;
            graphics2D.drawString("Vinogradnik", 10, h1);
            graphics2D.drawString("Žarn Jožef s.p.", 10, h1+=15);
            graphics2D.drawString("Gorjanska cesta 17",10, h1+=15);
            graphics2D.drawString("8311 Kostanjevica na Krki", 10, h1+=15);
            graphics2D.drawString("Davčna številka: 27273881", 10, h1+=15);
            
            Calendar now = GregorianCalendar.getInstance();
            int ura=(now.get(Calendar.AM_PM)==1)?(now.get(Calendar.HOUR)+12):(now.get(Calendar.HOUR));
            ura=ura%24;
            graphics2D.drawString("IZPIS ZALOGE DNE: "+now.get(Calendar.DAY_OF_MONTH)+"."+(now.get(Calendar.MONTH)+1)+"."+now.get(Calendar.YEAR)+" ob "+ura+":"+now.get(Calendar.MINUTE), 10, h1+=30);
            
            graphics2D.drawLine(5, h1+=10, sirinaPpx-5, h1);
           
            
            for(int i=0;i<model.getRowCount();i++){
               h1+=15;
               graphics2D.drawString(jTable1.getValueAt(i, 0).toString(),10,h1); 
               if(model.getValueAt(i, 1).toString().length()>12){
                   graphics2D.drawString(jTable1.getValueAt(i, 1).toString().substring(0,11)+".",50,h1);  
               }else{
                   graphics2D.drawString(jTable1.getValueAt(i, 1).toString(),50,h1);
               }
               graphics2D.drawString(jTable1.getValueAt(i, 2).toString(),sirinaPpx-100,h1);  
               graphics2D.drawString(jTable1.getValueAt(i, 3).toString(),sirinaPpx-30,h1); 
            }
            
            graphics2D.drawLine(5, h1+=10, sirinaPpx-5, h1);
            
            h1+=15;
            graphics2D.drawLine(0, h1, sirinaPpx, h1);
        }
        
            
        return (PAGE_EXISTS);
   }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.setLocationRelativeTo(null); //centriram okno
        naloziVse();
    }//GEN-LAST:event_formWindowOpened

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        naloziPodatkeOZalogi();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        PrinterJob printJob = PrinterJob.getPrinterJob ();
        
        Calendar now = GregorianCalendar.getInstance();
        int ura=(now.get(Calendar.AM_PM)==1)?(now.get(Calendar.HOUR)+12):(now.get(Calendar.HOUR));
        ura=ura%24;
        String zdaj=now.get(Calendar.DAY_OF_MONTH)+"_"+(now.get(Calendar.MONTH)+1)+"_"+(now.get(Calendar.YEAR))+"ob"+ura+"_"+now.get(Calendar.MINUTE);
            
        
        printJob.setJobName("IzpisZaloge_"+zdaj);
        
        int pageW=200;
        int pageH=800;        
        String printerTip="printer80mm";
        if(printerTip=="printer80mm"){
            //paper80mm
            pageW=(int)(80*2.83);
            pageH=130+(jTable1.getRowCount()*15)+10+16;
        }else if(printerTip=="A4"){
            pageW=595;
            pageH=842;
        }
        Paper paper = new Paper();
        paper.setSize(pageW, pageH);
        paper.setImageableArea(0,0,pageW, pageH);
        PageFormat pf=new PageFormat();
        pf.setPaper(paper);
        pf.setOrientation(PageFormat.PORTRAIT);
        Book pBook = new Book();
        pBook.append(this, pf,1);
        printJob.setPageable(pBook);    
        //--- Show a print dialog to the Faktura.user. If the Faktura.user
        //--- clicks the print button, then print, otherwise
        //--- cancel the print job
        if (printJob.printDialog()) {
           try {
              printJob.print();
              JOptionPane.showMessageDialog(rootPane, "Tiskanje zaključeno.");
           } catch (Exception PrintException) {
              PrintException.printStackTrace();
           }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private DefaultTableModel model;
    
    private void naloziVse(){
        
        model=new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Šifra","Izdelek", "Zaloga", "EM"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        };
        jTable1.setModel(model);
        
        
        naloziPodatkeOZalogi();
    }
    
    private void naloziPodatkeOZalogi(){
        try{

                java.sql.Driver d = null;
                java.sql.Connection c = null;
                java.sql.Statement s = null;
                java.sql.ResultSet rs = null;
            
                try {
                    c = java.sql.DriverManager.getConnection (Faktura.databaseURL, Faktura.user, Faktura.password);
                    System.out.println ("Connection established.");
                }
                catch (java.sql.SQLException e) {
                    System.out.println ("Unable to establish a connection through the driver manager.");
                }
            
            
                s = c.createStatement ();
                rs = s.executeQuery ("select * from izdelek INNER JOIN em ON izdelek.emid_fk=em.emid;");
                
                while(model.getRowCount()>0){
                    model.removeRow(0);
                }
                
                while(rs.next()){
                   model.insertRow(model.getRowCount(), new String[]{rs.getString("izdelekid"),rs.getString("naziv"),rs.getString("kolicina"),rs.getString("mera")});
                }

                c.close();
            
            } catch (SQLException ex) {
                Logger.getLogger(GlavnoOkno.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IzpisZaloge.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IzpisZaloge.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IzpisZaloge.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IzpisZaloge.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new IzpisZaloge().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
